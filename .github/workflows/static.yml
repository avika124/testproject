numpy: &numpy_import
  import: numpy as np

pandas: &pandas_import
  import: pandas as pd

yfinance: &yfinance_import
  import: yfinance as yf

sklearn:
  preprocessing: &preprocess_import
    import: sklearn.preprocessing.MinMaxScaler
  model_selection: &model_selection_import
    import: sklearn.model_selection.train_test_split

keras:
  models: &models_import
    import: keras.models.Sequential
  layers: &layers_import
    import:
      - keras.layers.Dense
      - keras.layers.LSTM

matplotlib: &matplotlib_import
  import: matplotlib.pyplot as plt

functions:
  download_stock_data:
    description: Download historical stock price data from Yahoo Finance
    parameters:
      - symbol
      - start_date
      - end_date
    body:
      - data = yf.download(symbol, start=start_date, end=end_date)
      - return: data

  prepare_data:
    description: Prepare data for the neural network
    parameters:
      - data
      - look_back: 1
    body:
      - scaler = preprocess_import()
      - scaled_data = scaler.fit_transform(data.values.reshape(-1, 1))
      - X = []
      - y = []
      - for: {i: 0, condition: "<", length: len(scaled_data) - look_back}
        - X.append(scaled_data[i:(i + look_back), 0])
        - y.append(scaled_data[i + look_back, 0])
      - return: [np.array(X), np.array(y)]

  build_model:
    description: Build and train the neural network model
    parameters:
      - input_shape
    body:
      - model = models_import()
      - model.add(layers_import['Dense'](64, input_shape=(input_shape,), activation='relu'))
      - model.add(layers_import['Dense'](32, activation='relu'))
      - model.add(layers_import['Dense'](1, activation='linear'))
      - model.compile(optimizer='adam', loss='mean_squared_error')
      - return: model

  plot_predictions:
    description: Plot actual vs predicted prices
    parameters:
      - actual
      - predicted
    body:
      - plt.plot(actual, label='Actual', color='blue')
      - plt.plot(predicted, label='Predicted', color='red')
      - plt.xlabel('Time')
      - plt.ylabel('Close Price')
      - plt.title('Stock Price Prediction with Neural Network')
      - plt.legend()
      - plt.show()

main:
  - stock_symbol: AAPL  # Example: Apple
  - start_date: '2020-01-01'
  - end_date: '2021-01-01'

  # Download stock price data
  - data = download_stock_data(stock_symbol, start_date, end_date)

  # Prepare data for the neural network
  - X, y = prepare_data(data['Close'], look_back=10)

  # Split data into training and testing sets
  - X_train, X_test, y_train, y_test = model_selection_import()(X, y, test_size=0.2, random_state=42)

  # Build and train the neural network model
  - model = build_model(input_shape=X_train.shape[1])
  - model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=1)

  # Evaluate the model
  - loss = model.evaluate(X_test, y_test)
  - print("Test Loss:", loss)

  # Make predictions
  - predicted = model.predict(X_test)

  # Plot actual vs predicted prices
  - plot_predictions(y_test, predicted)
